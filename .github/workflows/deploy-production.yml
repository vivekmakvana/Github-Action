name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy to production'
        required: true
        type: string
      skip_approval:
        description: 'Skip manual approval (emergency deployments only)'
        required: false
        type: boolean
        default: false

env:
  DOCKER_IMAGE_NAME: java-hello-world
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: production

jobs:
  validate-image:
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check.outputs.exists }}
    steps:
    - name: Validate image exists
      id: check
      run: |
        echo "Checking if image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }} exists..."
        
        # Use GitHub token to check if image exists in GHCR
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Image exists and is accessible"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "❌ Image does not exist or is not accessible"
          exit 1
        fi
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled


  manual-approval:
    runs-on: ubuntu-latest
    needs: validate-image
    if: github.event.inputs.skip_approval != 'true'
    environment: production-approval
    steps:
    - name: Manual approval checkpoint
      run: |
        echo "## Production Deployment Approval Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image to deploy:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please review the staging deployment before approving." >> $GITHUB_STEP_SUMMARY

  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate-image, manual-approval]
    if: always() && needs.validate-image.result == 'success' && (needs.manual-approval.result == 'success' || github.event.inputs.skip_approval == 'true')
    environment: production
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl for Production
      run: |
        mkdir -p ~/.kube
        printf '%s\n' "${{ secrets.KUBE_CONFIG_PROD }}" > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Prepare Kubernetes manifests
      run: |
        # Create production-specific manifests
        cp -r k8s k8s-prod
        
        # Update namespace for production (keep original name for prod)
        sed -i "s|IMAGE_PLACEHOLDER|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}|g" k8s-prod/deployment.yaml
        
        # Add production-specific labels and annotations
        sed -i '/metadata:/a\  labels:\n    environment: production' k8s-prod/*.yaml
        sed -i '/metadata:/a\  annotations:\n    deployment.kubernetes.io/revision: "${{ github.run_number }}"' k8s-prod/*.yaml
        
        # Set production replicas
        sed -i 's/replicas: 1/replicas: 3/g' k8s-prod/deployment.yaml
        
        # Add resource limits for production
        cat >> k8s-prod/deployment.yaml << 'EOF'
        
        # Production resource configuration
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        EOF
        
    - name: Create deployment backup
      run: |
        echo "Creating backup of current production deployment..."
        kubectl get deployment java-hello-world -n java-hello-world -o yaml > backup-deployment.yaml || echo "No existing deployment to backup"
        
    - name: Deploy to Production AKS (Blue-Green strategy)
      run: |
        echo "Deploying to Production environment with blue-green strategy..."
        
        # Apply namespace first
        kubectl apply -f k8s-prod/namespace.yaml
        
        # Deploy new version
        kubectl apply -f k8s-prod/deployment.yaml
        kubectl apply -f k8s-prod/service.yaml
        kubectl apply -f k8s-prod/ingress.yaml
        
    - name: Wait for deployment and validate
      run: |
        echo "Waiting for deployment to be ready..."
        kubectl wait --for=condition=available --timeout=600s deployment/java-hello-world -n java-hello-world
        
        echo "Validating deployment health..."
        kubectl get pods -n java-hello-world
        
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready --timeout=300s pod -l app=java-hello-world -n java-hello-world
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        
        # Get the service endpoint
        EXTERNAL_IP=$(kubectl get service java-hello-world -n java-hello-world -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "")
        
        if [[ -z "$EXTERNAL_IP" ]]; then
          echo "Using port-forward for health check..."
          kubectl port-forward service/java-hello-world 8080:8080 -n java-hello-world &
          PORT_FORWARD_PID=$!
          sleep 15
          ENDPOINT="http://localhost:8080"
        else
          echo "Testing external endpoint: $EXTERNAL_IP"
          ENDPOINT="http://$EXTERNAL_IP:8080"
        fi
        
        # Health check with retries
        for i in {1..5}; do
          if curl -f $ENDPOINT --max-time 10; then
            echo "✅ Production health check passed (attempt $i)"
            break
          else
            echo "❌ Production health check failed (attempt $i)"
            if [[ $i -eq 5 ]]; then
              echo "Health checks failed after 5 attempts, rolling back..."
              if [[ -f backup-deployment.yaml ]]; then
                kubectl apply -f backup-deployment.yaml
              fi
              exit 1
            fi
            sleep 10
          fi
        done
        
        [[ -n "$PORT_FORWARD_PID" ]] && kill $PORT_FORWARD_PID 2>/dev/null || true
        
    - name: Get final deployment status
      run: |
        echo "=== Final Production Status ===" 
        kubectl get pods -n java-hello-world -o wide
        kubectl get services -n java-hello-world
        kubectl get ingress -n java-hello-world
        kubectl describe deployment java-hello-world -n java-hello-world
        
    - name: Deployment summary
      run: |
        echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Successfully deployed to Production AKS cluster" >> $GITHUB_STEP_SUMMARY
        echo "✅ All health checks passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Blue-green deployment strategy executed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`java-hello-world\`" >> $GITHUB_STEP_SUMMARY
        echo "**Replicas:** 3" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify Slack on successful production deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 PRODUCTION DEPLOYMENT SUCCESSFUL! 🚀
          
          Repository: ${{ github.repository }}
          Environment: Production
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
          Deployed by: ${{ github.actor }}
          Deployment ID: ${{ github.run_number }}
          
          All health checks passed - application is live!
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on production deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 PRODUCTION DEPLOYMENT FAILED! 🚨
          
          Repository: ${{ github.repository }}
          Environment: Production
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
          Attempted by: ${{ github.actor }}
          
          IMMEDIATE ACTION REQUIRED - Check logs and consider rollback!
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}