name: CI - Build and Test

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    # Note: PR validation workflow handles PR builds

env:
  DOCKER_IMAGE_NAME: java-hello-world
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Java JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Compile Java application
      run: javac HelloWorldServer.java
      
    - name: Run basic smoke test
      run: |
        echo "Starting Java application in background..."
        timeout 10s java HelloWorldServer &
        APP_PID=$!
        sleep 3
        
        echo "Testing if application responds..."
        if curl -f http://localhost:8080 --max-time 5; then
          echo "✅ Application is responding correctly"
        else
          echo "❌ Application failed to respond"
          exit 1
        fi
        
        kill $APP_PID 2>/dev/null || true
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        
        for file in k8s/*.yaml; do
          if [[ -f "$file" ]]; then
            echo "Validating $file..."
            # Basic YAML syntax check
            python3 -c "import yaml; yaml.safe_load(open('$file'))"
          fi
        done
        
        echo "✅ All Kubernetes manifests are valid"
        
    - name: Build summary
      run: |
        echo "## CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Java application compiled successfully" >> $GITHUB_STEP_SUMMARY
        echo "✅ Application smoke test passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Docker image built and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Kubernetes manifests validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY